{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MetaTrader5 package author:  MetaQuotes Software Corp.\n",
      "MetaTrader5 package version:  5.0.33\n",
      "Etc/UTC\n",
      "Display obtained data 'as is'\n",
      "(1597107600, 2027.06, 2028.94, 2027.06, 2027.81, 43, 33, 0)\n",
      "(1597107660, 2027.81, 2027.81, 2027.59, 2027.71, 9, 33, 0)\n",
      "(1597107720, 2027.7, 2027.7, 2026.52, 2026.86, 31, 33, 0)\n",
      "(1597107780, 2026.72, 2027.2, 2026.72, 2027.1, 32, 72, 0)\n",
      "(1597107840, 2027.01, 2027.13, 2026.35, 2026.48, 25, 81, 0)\n",
      "(1597107900, 2026.85, 2027.59, 2026.6, 2027.33, 17, 60, 0)\n",
      "(1597107960, 2027.37, 2027.56, 2027.19, 2027.51, 15, 77, 0)\n",
      "(1597108020, 2027.47, 2027.51, 2026.84, 2026.89, 13, 78, 0)\n",
      "(1597108080, 2027.26, 2027.29, 2026.94, 2027.26, 11, 69, 0)\n",
      "(1597108140, 2027.29, 2027.29, 2026.44, 2026.82, 31, 43, 0)\n",
      "\n",
      "Display dataframe with data\n",
      "                 time     open     high      low    close  tick_volume  spread  real_volume   ATR  upper  middle  lower  diffBB\n",
      "0 2020-08-11 01:00:00  2027.06  2028.94  2027.06  2027.81           43      33            0   NaN    NaN     NaN    NaN     NaN\n",
      "1 2020-08-11 01:01:00  2027.81  2027.81  2027.59  2027.71            9      33            0  0.22    NaN     NaN    NaN     NaN\n",
      "2 2020-08-11 01:02:00  2027.70  2027.70  2026.52  2026.86           31      33            0  1.19    NaN     NaN    NaN     NaN\n",
      "3 2020-08-11 01:03:00  2026.72  2027.20  2026.72  2027.10           32      72            0  0.48    NaN     NaN    NaN     NaN\n",
      "4 2020-08-11 01:04:00  2027.01  2027.13  2026.35  2026.48           25      81            0  0.78    NaN     NaN    NaN     NaN\n",
      "5 2020-08-11 01:05:00  2026.85  2027.59  2026.60  2027.33           17      60            0  1.11    NaN     NaN    NaN     NaN\n",
      "6 2020-08-11 01:06:00  2027.37  2027.56  2027.19  2027.51           15      77            0  0.37    NaN     NaN    NaN     NaN\n",
      "7 2020-08-11 01:07:00  2027.47  2027.51  2026.84  2026.89           13      78            0  0.67    NaN     NaN    NaN     NaN\n",
      "8 2020-08-11 01:08:00  2027.26  2027.29  2026.94  2027.26           11      69            0  0.40    NaN     NaN    NaN     NaN\n",
      "9 2020-08-11 01:09:00  2027.29  2027.29  2026.44  2026.82           31      43            0  0.85    NaN     NaN    NaN     NaN\n",
      "\n",
      "Display dataframe with data\n",
      "                    time     open     high      low    close  tick_volume  spread  real_volume   ATR        upper       middle        lower    diffBB\n",
      "1738 2020-08-12 06:59:00  1886.23  1886.23  1885.03  1885.09           51      44            0  1.20  1889.956997  1887.445698  1884.934399  5.022599\n",
      "1739 2020-08-12 07:00:00  1885.11  1885.52  1884.05  1884.23           61      33            0  1.47  1889.279927  1886.541683  1883.803438  5.476489\n",
      "1740 2020-08-12 07:01:00  1884.13  1886.88  1883.77  1886.27           59      33            0  3.11  1888.438296  1885.910258  1883.382220  5.056076\n",
      "1741 2020-08-12 07:02:00  1886.25  1886.67  1885.64  1886.58           45      33            0  1.03  1887.387882  1885.623905  1883.859928  3.527955\n",
      "1742 2020-08-12 07:03:00  1886.58  1886.78  1885.92  1886.77           22      33            0  0.86  1887.562282  1885.615288  1883.668295  3.893987\n",
      "1743 2020-08-12 07:04:00  1886.69  1886.86  1884.64  1885.31           51      33            0  2.22  1887.487218  1885.596170  1883.705122  3.782097\n",
      "1744 2020-08-12 07:05:00  1885.44  1885.51  1884.91  1885.34           47      33            0  0.60  1886.760044  1885.527382  1884.294720  2.465324\n",
      "1745 2020-08-12 07:06:00  1885.31  1885.35  1884.76  1885.21           31      33            0  0.59  1886.786665  1885.418373  1884.050081  2.736585\n",
      "1746 2020-08-12 07:07:00  1885.22  1885.22  1882.40  1882.49           62      39            0  2.82  1887.768375  1884.984720  1882.201065  5.567310\n",
      "1747 2020-08-12 07:08:00  1882.59  1883.23  1882.56  1883.23           14      64            0  0.74  1886.863406  1884.438614  1882.013822  4.849584\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.079, 1.063]      209\n",
       "(1.063, 2.027]      359\n",
       "(2.027, 2.99]       350\n",
       "(2.99, 3.954]       249\n",
       "(3.954, 4.918]      163\n",
       "(4.918, 5.881]      144\n",
       "(5.881, 6.845]       81\n",
       "(6.845, 7.809]       54\n",
       "(7.809, 8.773]       28\n",
       "(8.773, 9.736]       22\n",
       "(9.736, 10.7]        18\n",
       "(10.7, 11.664]       20\n",
       "(11.664, 12.627]      6\n",
       "(12.627, 13.591]      7\n",
       "(13.591, 14.555]      3\n",
       "(14.555, 15.518]      2\n",
       "(15.518, 16.482]      3\n",
       "(16.482, 17.446]      1\n",
       "(17.446, 18.409]      1\n",
       "(18.409, 19.373]      4\n",
       "Name: diffBB, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "import MetaTrader5 as mt5 \n",
    "# display data on the MetaTrader 5 package \n",
    "print(\"MetaTrader5 package author: \",mt5.__author__) \n",
    "print(\"MetaTrader5 package version: \",mt5.__version__) \n",
    "  \n",
    "# import the 'pandas' module for displaying data obtained in the tabular form\n",
    "import pandas as pd\n",
    "pd.set_option('display.max_columns', 500) # number of columns to be displayed\n",
    "pd.set_option('display.width', 1500)      # max table width to display\n",
    "# import pytz module for working with time zone\n",
    "import pytz \n",
    "import talib as ta\n",
    "\n",
    "# establish connection to MetaTrader 5 terminal \n",
    "if not mt5.initialize():\n",
    "    print(\"initialize() failed, error code =\",mt5.last_error()) \n",
    "    quit()\n",
    " \n",
    "# set time zone to UTC\n",
    "timezone = pytz.timezone(\"Etc/UTC\")\n",
    "print(timezone)\n",
    "# create 'datetime' objects in UTC time zone to avoid the implementation of a local time zone offset\n",
    "utc_from = datetime(2020, 8, 11, tzinfo=timezone)\n",
    "utc_to = datetime(2020, 8, 12, hour = 13, tzinfo=timezone)\n",
    "# get bars from USDJPY M5 within the interval of 2020.01.10 00:00 - 2020.01.11 13:00 in UTC time zone\n",
    "rates = mt5.copy_rates_range(\"GOLD\", mt5.TIMEFRAME_M1, utc_from, utc_to)\n",
    " \n",
    "# shut down connection to the MetaTrader 5 terminal\n",
    "mt5.shutdown() \n",
    "\n",
    "# display each element of obtained data in a new line\n",
    "print(\"Display obtained data 'as is'\")\n",
    "counter=0\n",
    "for rate in rates:\n",
    "    counter+=1\n",
    "    if counter<=10:\n",
    "        print(rate)\n",
    " \n",
    "# create DataFrame out of the obtained data\n",
    "rates_frame = pd.DataFrame(rates)\n",
    "# convert time in seconds into the 'datetime' format\n",
    "rates_frame['time']=pd.to_datetime(rates_frame['time'], unit='s')\n",
    "rates_frame['ATR']=ta.ATR(rates_frame['high'],rates_frame['low'],rates_frame['close'],timeperiod=1)\n",
    "\n",
    "from talib import MA_Type\n",
    "#fastk, fastd = ta.STOCHF(rates_frame['high'], rates_frame['low'], rates_frame['close'], fastk_period=5, fastd_period=3, fastd_matype=0)\n",
    "#rates_frame['slowk'], rates_frame['slowd'] = ta.STOCH(rates_frame['high'], rates_frame['low'], rates_frame['close'], fastk_period=5, slowk_period=3, slowk_matype=0, slowd_period=3, slowd_matype=0)\n",
    "rates_frame['upper'], rates_frame['middle'], rates_frame['lower'] = ta.BBANDS(rates_frame['close'], matype=MA_Type.T3)\n",
    "rates_frame['diffBB'] = rates_frame['upper']-rates_frame['lower']\n",
    "# display data\n",
    "print(\"\\nDisplay dataframe with data\")\n",
    "print(rates_frame.head(10))\n",
    "print(\"\\nDisplay dataframe with data\") \n",
    "print(rates_frame.tail(10))\n",
    "\n",
    "#rates_frame.describe()\n",
    "#rates_frame.quantile([.25,.5,.75])\n",
    "#print(rates_frame.max())\n",
    "#rates_frame['ATR'].value_counts(bins=20,sort=False)\n",
    "rates_frame['diffBB'].value_counts(bins=20,sort=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
